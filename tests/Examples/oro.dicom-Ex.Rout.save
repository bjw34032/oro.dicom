
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "oro.dicom"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('oro.dicom')

oro.dicom: Rigorous - DICOM Input / Output (version = 0.4.1)

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("create")
> ### * create
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Create
> ### Title: Create Arrays from DICOM Headers/Images
> ### Aliases: create3D create4D
> 
> ### ** Examples
> 
> ## pixelData = TRUE
> ## The DICOM image data are read from readDICOM()
> ## Not run: 
> ##D dcmList <- readDICOM(system.file("hk-40", package="oro.dicom"))
> ## End(Not run)
> load(system.file("hk-40/hk40.RData", package="oro.dicom"))
> dcmList <- hk40
> dcmImage <- create3D(dcmList)
> image(dcmImage[,,1], col=grey(0:64/64), axes=FALSE, xlab="", ylab="",
+       main=paste("First Slice from HK-40"))
> imagePositionPatient <- attributes(dcmImage)$ipp
> dSL <- abs(diff(imagePositionPatient[,3]))
> plot(dSL, ylim=range(range(dSL) * 1.5, 0, 10), xlab="Image", ylab="mm",
+      main="Difference in Slice Location")
> 
> ## Not run: 
> ##D ## pixelData = FALSE
> ##D ## The DICOM image data are read from create3D()
> ##D ## This may save on memory for large batches of DICOM data
> ##D dcmList <- readDICOM(system.file("hk-40", package="oro.dicom"),
> ##D                      pixelData=FALSE)
> ##D dcmImage <- create3D(dcmList, pixelData=FALSE)
> ##D image(dcmImage[,,1], col=grey(0:64/64), axes=FALSE, xlab="", ylab="",
> ##D       main=paste("First Slice from HK-40 (again)"))
> ## End(Not run)
> ## mosaic = TRUE
> mosaicFile <- system.file("dcm/MR-sonata-3D-as-Tile.dcm", package="oro.dicom")
> dcm <- readDICOMFile(mosaicFile)
> image(t(dcm$img), col=grey(0:64/64), axes=FALSE, xlab="", ylab="",
+       main="Siemens MOSAIC")
> dcmImage <- create3D(dcm, mode="integer", mosaic=TRUE)
> z <- trunc(dim(dcmImage)[3]/2)
> image(dcmImage[,,z], col=grey(0:64/64), axes=FALSE, xlab="", ylab="",
+       main=paste("Slice", z, "from Siemens MOSAIC"))
> 
> 
> 
> cleanEx()
> nameEx("dec2base")
> ### * dec2base
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dec2base
> ### Title: Convert Decimal to Base N Number in String
> ### Aliases: dec2base dec2hex
> ### Keywords: misc
> 
> ### ** Examples
> 
> (x <- dec2base(23, 2))
[1] "10111"
> 
> 
> 
> cleanEx()
> nameEx("dicom2analyze")
> ### * dicom2analyze
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dicom2analyze
> ### Title: Convert DICOM Header to Analyze
> ### Aliases: dicom2analyze
> ### Keywords: file
> 
> ### ** Examples
> 
> ## Not run: 
> ##D dcmList <- dicomSeparate(system.file("hk-40", package="oro.dicom"))
> ##D require("oro.nifti")
> ##D dcmAnlz <- dicom2analyze(dcmList, datatype=4, mode="integer")
> ##D image(dcmAnlz)
> ##D orthographic(dcmAnlz)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("dicom2nifti")
> ### * dicom2nifti
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dicom2nifti
> ### Title: Convert DICOM Header to NIfTI
> ### Aliases: dicom2nifti
> ### Keywords: file
> 
> ### ** Examples
> 
> ## Not run: 
> ##D dcmList <- dicomSeparate(system.file("hk-40", package="oro.dicom"))
> ##D require("oro.nifti")
> ##D dcmNifti <- dicom2nifti(dcmList, datatype=4, mode="integer")
> ##D qform(dcmNifti)
> ##D sform(dcmNifti)
> ##D image(dcmNifti)
> ##D orthographic(dcmNifti)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("extractHeader")
> ### * extractHeader
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extractHeader
> ### Title: Extract Single Field from DICOM Headers
> ### Aliases: extractHeader
> ### Keywords: misc
> 
> ### ** Examples
> 
> x <- readDICOMFile(system.file("dcm/Abdo.dcm", package="oro.dicom"))
> (seriesDescription <- extractHeader(x$hdr, "SeriesDescription",
+                                     numeric=FALSE))
[1] "Liver SpleeT2W UTSE RC$ COR    TSE   2000      100    90"
> (IOP <- extractHeader(x$hdr, "ImageOrientationPatient", numeric=FALSE))
[1] "1.000000 0.000000 0.000000 0.000000 0.000000 -1.000000"
> 
> 
> 
> cleanEx()
> nameEx("header2matrix")
> ### * header2matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: header2matrix
> ### Title: Converts DICOM Header Field to a Matrix
> ### Aliases: header2matrix
> ### Keywords: misc
> 
> ### ** Examples
> 
> x <- readDICOMFile(system.file("dcm/Abdo.dcm", package="oro.dicom"))
> pixelSpacing <- extractHeader(x$hdr, "PixelSpacing", numeric=FALSE)
> pSmat <- header2matrix(pixelSpacing, ncol=2)
> IOP <- extractHeader(x$hdr, "ImageOrientationPatient", numeric=FALSE)
> IOPmat <- header2matrix(IOP, ncol=6)
> 
> 
> 
> cleanEx()
> nameEx("matchHeader")
> ### * matchHeader
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: matchHeader
> ### Title: Match String to DICOM Header Field
> ### Aliases: matchHeader
> 
> ### ** Examples
> 
> x <- readDICOMFile(system.file("dcm/Abdo.dcm", package="oro.dicom"))
> modality <- extractHeader(x$hdr, "Modality", numeric=FALSE)
> matchHeader(modality, "mr") # case insensitive by default
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("planes")
> ### * planes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Orthogonal Planes
> ### Title: Orthogonal Planes
> ### Aliases: is.axial is.coronal is.sagittal
> ### Keywords: misc
> 
> ### ** Examples
> 
> x <- readDICOMFile(system.file("dcm/Abdo.dcm", package="oro.dicom"))
> iop <-
+   header2matrix(extractHeader(x$hdr, "ImageOrientationPatient", FALSE), 6)
> is.axial(iop)
[1] FALSE
> is.coronal(iop)
[1] TRUE
> is.sagittal(iop)
[1] FALSE
> 
> x <- readDICOMFile(system.file("dcm/Spine1.dcm", package="oro.dicom"))
> iop <-
+   header2matrix(extractHeader(x$hdr, "ImageOrientationPatient", FALSE), 6)
> is.axial(iop)
Warning in is.axial(iop) :
  Oblique acquisition in ImageOrientationPatient.
[1] FALSE
> is.coronal(iop)
Warning in is.coronal(iop) :
  Oblique acquisition in ImageOrientationPatient.
[1] FALSE
> is.sagittal(iop)
Warning in is.sagittal(iop) :
  Oblique acquisition in ImageOrientationPatient.
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("readDICOM")
> ### * readDICOM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readDICOM
> ### Title: Read All DICOM Files in a Directory
> ### Aliases: readDICOM dicomSeparate
> ### Keywords: file
> 
> ### ** Examples
> 
> ## Not run: 
> ##D dcmSphere <- readDICOM(system.file("sphere3", package="oro.dicom"),
> ##D                        verbose=TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("readDICOMFile")
> ### * readDICOMFile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readDICOMFile
> ### Title: Read Single DICOM File
> ### Aliases: parseDICOMHeader readDICOMFile dicomInfo
> ### Keywords: file
> 
> ### ** Examples
> 
> x <- readDICOMFile(system.file("dcm/Abdo.dcm", package="oro.dicom"))
> graphics::image(t(x$img), col=grey(0:64/64), axes=FALSE, xlab="", ylab="",
+                 main="Abdo.dcm")
> 
> x <- readDICOMFile(system.file("dcm/Spine1.dcm", package="oro.dicom"))
> graphics::image(t(x$img), col=grey(0:64/64), axes=FALSE, xlab="", ylab="",
+                 main="Spine1.dcm")
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.528 0.145 2.709 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
